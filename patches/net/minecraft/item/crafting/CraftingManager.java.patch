--- ../src-base/minecraft/net/minecraft/item/crafting/CraftingManager.java
+++ ../src-work/minecraft/net/minecraft/item/crafting/CraftingManager.java
@@ -1,9 +1,11 @@
 package net.minecraft.item.crafting;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import net.minecraft.block.Block;
 import net.minecraft.init.Blocks;
@@ -13,10 +15,55 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class CraftingManager
 {
     private static final CraftingManager instance = new CraftingManager();
-    private List recipes = new ArrayList();
+    // CraftBukkit start
+    /** A list of all the recipes added */
+    public List recipes = new ArrayList(){
+        @Override
+        public void add(int index, Object element) {
+            if(!doCheck(element)) return;
+            super.add(index, element);
+        }
+        
+        @Override
+        public boolean add(Object e) {
+            if(!doCheck(e)) return false;
+            return super.add(e);
+        }
+        
+        @Override
+        public boolean addAll(Collection c) {
+            Iterator iterator = c.iterator();
+            while(iterator.hasNext()){
+                if(!doCheck(iterator.next())) iterator.remove();
+            }
+            
+            return super.addAll(c);
+        }
+        
+        @Override
+        public boolean addAll(int index, Collection c) {
+            Iterator iterator = c.iterator();
+            while(iterator.hasNext()){
+                if(!doCheck(iterator.next())) iterator.remove();
+            }
+            return super.addAll(index, c);
+        }
+        
+        private boolean doCheck(Object element){
+            if(!(element instanceof IRecipe)) return true;
+            IRecipe tRecipe=(IRecipe)element;
+            return tRecipe.getRecipeOutput()==null||tRecipe.getRecipeOutput().getItem()!=null;
+        }
+        
+    }; // private -> public
+    public IRecipe lastRecipe;
+    public org.bukkit.inventory.InventoryView lastCraftView;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00000090";
 
     public static final CraftingManager getInstance()
@@ -24,7 +71,8 @@
         return instance;
     }
 
-    private CraftingManager()
+    // CraftBukkit - private -> public
+    public CraftingManager()
     {
         (new RecipesTools()).addRecipes(this);
         (new RecipesWeapons()).addRecipes(this);
@@ -152,6 +200,23 @@
         this.addShapelessRecipe(new ItemStack(Items.fire_charge, 3), new Object[] {Items.gunpowder, Items.blaze_powder, new ItemStack(Items.coal, 1, 1)});
         this.addRecipe(new ItemStack(Blocks.daylight_detector), new Object[] {"GGG", "QQQ", "WWW", 'G', Blocks.glass, 'Q', Items.quartz, 'W', Blocks.wooden_slab});
         this.addRecipe(new ItemStack(Blocks.hopper), new Object[] {"I I", "ICI", " I ", 'I', Items.iron_ingot, 'C', Blocks.chest});
+        /*Collections.sort(this.recipes, new Comparator() // CraftBukkit - moved below
+        {
+            private static final String __OBFID = "CL_00000091";
+            public int compare(IRecipe par1IRecipe, IRecipe par2IRecipe)
+            {
+                return par1IRecipe instanceof ShapelessRecipes && par2IRecipe instanceof ShapedRecipes ? 1 : (par2IRecipe instanceof ShapelessRecipes && par1IRecipe instanceof ShapedRecipes ? -1 : (par2IRecipe.getRecipeSize() < par1IRecipe.getRecipeSize() ? -1 : (par2IRecipe.getRecipeSize() > par1IRecipe.getRecipeSize() ? 1 : 0)));
+            }
+            public int compare(Object par1Obj, Object par2Obj)
+            {
+                return this.compare((IRecipe)par1Obj, (IRecipe)par2Obj);
+            }
+        });*/
+         this.sort(); // CraftBukkit - call new sort method
+    }
+
+    public void sort()
+    {
         Collections.sort(this.recipes, new Comparator()
         {
             private static final String __OBFID = "CL_00000091";
@@ -312,7 +377,16 @@
                 i1 = 0;
             }
 
-            return new ItemStack(itemstack.getItem(), 1, i1);
+            // CraftBukkit start - Construct a dummy repair recipe
+            ItemStack result = new ItemStack(itemstack.getItem(), 1, i1);
+            List<ItemStack> ingredients = new ArrayList<ItemStack>();
+            ingredients.add(itemstack.copy());
+            ingredients.add(itemstack1.copy());
+            ShapelessRecipes recipe = new ShapelessRecipes(result.copy(), ingredients);
+            p_82787_1_.currentRecipe = recipe;
+            result = CraftEventFactory.callPreCraftEvent(p_82787_1_, result, lastCraftView, true);
+            return result;
+            // CraftBukkit end
         }
         else
         {
@@ -322,10 +396,15 @@
 
                 if (irecipe.matches(p_82787_1_, p_82787_2_))
                 {
-                    return irecipe.getCraftingResult(p_82787_1_);
+                    // CraftBukkit start - INVENTORY_PRE_CRAFT event
+                    p_82787_1_.currentRecipe = irecipe;
+                    ItemStack result = irecipe.getCraftingResult(p_82787_1_);
+                    return CraftEventFactory.callPreCraftEvent(p_82787_1_, result, lastCraftView, false);
+                    // CraftBukkit end
                 }
             }
 
+            p_82787_1_.currentRecipe = null; // CraftBukkit - Clear recipe when no recipe is found
             return null;
         }
     }
